import java.io._
import java.math._
import java.security._
import java.text._
import java.util._
import java.util.concurrent._
import java.util.function._
import java.util.regex._
import java.util.stream._
import scala.collection.immutable._
import scala.collection.mutable._
import scala.collection.concurrent._
import scala.concurrent._
import scala.io._
import scala.math._
import scala.sys._
import scala.util.matching._
import scala.reflect._

object Result {

    /*
     * Complete the 'breakingRecords' function below.
     *
     * The function is expected to return an INTEGER_ARRAY.
     * The function accepts INTEGER_ARRAY scores as parameter.
     */

    def breakingRecords(scores: Array[Int]): Array[Int] = {
    // Write your code here
  var max = scores(0)
  var min = scores(0)
  var maxCount = 0
  var minCount = 0
  var new_arr = Array[Int]()
  for (i <- 0 until scores.size){
    if(max < scores(i)){
      maxCount += 1
      max = scores(i)
    }

    if (scores(i) < min){
      minCount += 1
      min = scores(i)
    }

  }
  println("maxCount:: "+ maxCount )
  println("minCount:: "+ minCount)
  new_arr :+= maxCount
  new_arr :+= minCount
  
    new_arr
    }

}

object Solution {
    def main(args: Array[String]) {
        val printWriter = new PrintWriter(sys.env("OUTPUT_PATH"))

        val n = StdIn.readLine.trim.toInt

        val scores = StdIn.readLine.replaceAll("\\s+$", "").split(" ").map(_.trim.toInt)

        val result = Result.breakingRecords(scores)

        printWriter.println(result.mkString(" "))

        printWriter.close()
    }
}
